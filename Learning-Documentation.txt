# Learning-Documentation
Computer Architechture Class Work July 10


Link 1: CPU Visual Simulator
URL: https://cpuvisualsimulator.github.io/

Summary of Content:
The CPU Visual Simulator is a cool educational tool that helps us understand how a CPU works at a really detailed level. It shows you a visual representation of the CPU’s inner systems. You can input code and watch how the CPU processes it step-by-step.

Key Takeaways:

Shows how different parts of the CPU interact when it runs instructions.
Lets us input assembly instructions and see how the CPU’s state changes.
Great for learning about CPU architecture and assembly language.

Personal Insights or Reflections:

The visual approach makes it a lot easier to understand complicated CPU operations.
It’s an awesome resource for students and teachers in computer science.
Makes the inner workings of a CPU easier to get, even for beginners.

Feedback and Reflection:

The interface is straightforward and easy to use, but more tutorials or guides would be nice.
Adding advanced features or real-world CPU models could make it even better.
Being able to save and share simulations would be super helpful for group projects.

Link 2: Godbolt Compiler Explorer
URL: https://godbolt.org/

Summary of Content:

Godbolt Compiler Explorer is a web tool that lets you see the output of different compilers. You can write code in different programming languages and see the assembly code generated by different compilers. It’s great for understanding how high-level code gets translated into machine code.

Key Takeaways:

Supports many programming languages like C++, Rust, Go, and more.
Lets you choose different compilers and see how the assembly code changes.
Gives real-time feedback and a detailed view of the compilation process.

Personal Insights or Reflections:

Seeing the assembly code helps you write more efficient and optimized code.
It’s super useful for debugging and optimizing code, especially for performance-heavy applications.
Provides a hands-on way to learn about how compilers work and how high-level code is turned into machine instructions.

Feedback and Reflection:

The interface is user-friendly and easy to understand, but more documentation or tutorials would help.
Comparing the outputs of multiple compilers side-by-side is a really powerful feature.

It seems easy but since I am personally not a big Progamming guy it kinda seems tricky to me but I am hopfull that if I continue to earn it I will be able to learn it well enough.